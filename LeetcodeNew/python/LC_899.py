"""
0 [123456789]
0 [891234567] => 8 [912345670] => 8 [91234567] => 5670912348

899.Orderly-Queue
本题是一道趣味数学题。事实上，当K>=2的时候，可以用题目规则构造任意组合的字符串。

首先通过循环轮转（即持续地将字符串的第一个字母放到最后一个的位置），我们可以将某个需要的字符X轮转到出现在字符串的首位。
然后固定X不动，然后再持续地将字符串的第二个字母放到最后一位，直至最后一位字母出现的是某个需要的字符Y。最后我们将第一位的X放在字符串末尾。于是，以上操作就实现了将任意字符X放在任意字符Y后面的操作！不断地重复这个方法，就可以构造出任意的想要的字符。

当K==1的时候，没有特别巧的方法，我们只能遍历所有的循环轮转的可能，构造出N种字符串，选取字典序最小的一个。

"""
class Solution:
    def orderlyQueue(self, S: str, K: int) -> str:
        if K >= 2:
            return "".join(sorted(S))

        res = S
        for i in range(len(S)):
            S = S[1:] + S[0]
            if S < res:
                res = S
        return res



