'''
dijsktra: the longest to leaf
drime: the shortest sum to all leaves


Question:
1 who are the customers? delivery, client or administrator
2. How many are they
3. is this service global or within a city
4. QPS
5. scenario
6. is the lock numeric or combined with letters

Requirement:
Find a location which is not full and closet to the customer
after delivery, a 6-digit code will be sent to the custormer
item will be returned after three days
amazon locker should be assigned based on the item size, and we should optimize the caallocation
the locker can be used to return item after the user request so online
once the door is closed, code is expired

List find_Locker(item_id,size_requested,customer_latitude,customer_longitude)

This will find all the lockers based on the size_requested by the customer
All the lockers can be put in a data structure like (K_dimension tree), to effectively search lockers, based on k dimensions
where dimesnsions could be location,size,availibility

Each locker Obect have the property
Locker {
Locker_id
size,
locker_status
}

locker_status {
Booked
Free

}

on next screen user will get the list of nearest amazon lockers available with their address details and their closing and opening timings.

User selects one of the amazon locker from the given lockers location list

api request like (item_id, locker_id,payment_status,expected_delivery_date) will be made from the client side.
6a. Now the locker_id status will be changed to BOOKED, only when payment Status = OK
6a i. when the locker is booked, an RDMS transaction will be commited and locker_status will be changed to BOOKED
Note : we will use RDMS database (MySQL) because locker booking status needs consistency. so MYSQL transactions will provide ACID properties with BEGIN Transaction
and COMMIT feature for booking a current locker. SO that in distributed environment , other customers can not book the same locker.
6a ii. when payment_status is NOT_OK, locker_id will not be booked . error message will be spawned from the (amazon locker booking service) microservice directly to theclient

when the locker is booked. locker_staus will be : BOOKED of given locker_ID

Given locker_id will not be sent to AMAZON LOCKER.

AMAZON LOCKER -> is the actual locker at a particular store
AMAZON LOCKER will generate a two 6 digit code for a given locker_ID

one for BlueDart delivery service and will send code to
one for Customer , code will be generated after Bluedart delivery service has placed the order and closed the door.
Amazon Locker will send this code to Amazon App server.

Code generated by Amazon Locker will be sent through messaging queue.

Messaging queue(like Rabbit MQ) will send the code to app server and client(subscriber)

App server will store the code in their db as well

After customer has taken out the order from the order . Locker status will be changed to FREE and same status will be deliverd by AMAZON locker system to app server, which will in turn will update the locker_id to db.

IF AMAZON LOCKER is closed from 3 days. a request to app server is made to delivery service to pickup the item from the given locker id.

'''

class OrderStatus:
    pass

class Order:
    def __init__(self, id, user, status, address, date):
        pass

class Package:
    def __init__(self, id, user, address, date, status, location):
        self.__orders = []
        pass

    def addOrder(self, order):
        self.__orders.append(order)

    def finishPacking(self, length, width, height, weight):
        pass

    def __findLocker(self):
        pass


class Location:
    def __init__(self):
        pass

    def addLockers(self, locker):
        self.__lockers.append(locker)

class Locker:
    def __init__(self, length, width, height, weight, status):
        pass

class Shipment:
    def __init__(self, id, date):
        self.packages = []
        pass

